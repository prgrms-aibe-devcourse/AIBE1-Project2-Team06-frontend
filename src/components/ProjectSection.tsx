import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { brandColors } from "../styles/GlobalStyle";
import { useNavigate, Link } from "react-router-dom";
import { fetchAPI } from "../config/apiConfig";
// import { FaThumbsUp } from 'react-icons/fa';
// import { GoComment } from 'react-icons/go';

const SectionContainer = styled.section`
  width: 100%;
  padding: 60px 20px;
  display: flex;
  justify-content: center;
  background-color: #fff;
`;

const SectionContent = styled.div`
  width: 100%;
  max-width: 1200px;
  display: flex;
  flex-direction: column;
  gap: 32px;
`;

const SectionHeader = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 12px;
`;

const Title = styled.h2`
  font-size: 24px;
  font-weight: 700;
  color: #333;
  font-family: "CookieRun-Regular", sans-serif;
`;

const Description = styled.p`
  font-size: 15px;
  color: #666;
  line-height: 1.5;
  font-family: "CookieRun-Regular", sans-serif;
`;

const CategoryTabs = styled.div`
  display: flex;
  border-bottom: 1px solid #eee;
  margin-bottom: 20px;
`;

const CategoryTab = styled.button<{ active?: boolean }>`
  padding: 12px 16px;
  font-size: 15px;
  font-weight: ${(props) => (props.active ? "600" : "400")};
  color: ${(props) => (props.active ? "#333" : "#888")};
  background: none;
  border: none;
  border-bottom: 2px solid
    ${(props) => (props.active ? "#3498db" : "transparent")};
  cursor: pointer;

  &:hover {
    color: #3498db;
  }
`;

const CardsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;

  @media (max-width: 1200px) {
    grid-template-columns: repeat(3, 1fr);
  }

  @media (max-width: 992px) {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (max-width: 576px) {
    grid-template-columns: 1fr;
  }
`;

const ProjectCardWrapper = styled.div`
  border: 1px solid #eaeaea;
  border-radius: 16px;
  overflow: hidden;
  background-color: white;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  cursor: pointer;

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
`;

const CardHeader = styled.div`
  padding: 12px 16px;
  display: flex;
  gap: 8px;
`;

const TagCategory = styled.div`
  background-color: ${brandColors.primaryLight};
  color: ${brandColors.primaryText};
  font-size: 12px;
  padding: 4px 10px;
  border-radius: 30px;
  font-weight: 500;
  display: flex;
  align-items: center;
`;

const TagEducation = styled.div`
  background-color: #fff0f0;
  color: #ff9999;
  font-size: 12px;
  padding: 4px 10px;
  border-radius: 30px;
  font-weight: 500;
  display: flex;
  align-items: center;
`;

const HandIcon = styled.div`
  margin-left: auto;
  color: ${brandColors.primary};
  font-size: 20px;
`;

const CardContent = styled.div`
  padding: 0 16px 16px;
`;

const CardDate = styled.div`
  font-size: 12px;
  color: #999;
  margin-bottom: 4px;
`;

const CardTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #333;
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: normal;
  line-height: 1.4;
  height: 22px;
  font-family: "CookieRun-Regular", sans-serif;
`;

const CardFilter = styled.div`
  margin-top: 12px;
  display: flex;
  gap: 6px;
`;

const FilterButton = styled.button`
  padding: 3px 10px;
  background: none;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  font-size: 12px;
  color: #666;
  cursor: pointer;

  &:hover {
    background-color: #f8f8f8;
  }
`;

const CardDivider = styled.div`
  height: 1px;
  background-color: #eee;
  margin: 12px 0;
`;

const CardFooter = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
`;

const AuthorInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 6px;
`;

const AuthorAvatar = styled.div`
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background-color: #f0f0f0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  color: #666;
`;

const AuthorName = styled.span`
  font-size: 13px;
  color: #333;
  font-weight: 500;
`;

const Pagination = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 32px;
  gap: 4px;
`;

const PageNumber = styled.button<{ active?: boolean }>`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: ${(props) =>
    props.active ? brandColors.primary : "transparent"};
  color: ${(props) => (props.active ? "white" : "#666")};
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  cursor: pointer;
  border: none;
  transition: all 0.2s ease;

  &:hover {
    background-color: ${(props) =>
      props.active ? brandColors.primary : brandColors.primaryLight};
    color: ${(props) => (props.active ? "white" : brandColors.primaryText)};
  }
`;

const FilterBar = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 24px;
  flex-wrap: wrap;
`;

// Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏ Ï∂îÍ∞Ä
const CategoryButtonContainer = styled.div`
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
`;

const CategoryButton = styled.button<{ active: boolean }>`
  padding: 8px 20px;
  background-color: ${({ active }) =>
    active ? brandColors.primary : "transparent"};
  color: ${({ active }) => (active ? "white" : "#666")};
  border: 1px solid ${({ active }) => (active ? brandColors.primary : "#ddd")};
  border-radius: 20px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: "CookieRun-Regular", sans-serif;

  &:hover {
    background-color: ${({ active }) =>
      active ? brandColors.primary : "#f0f0f0"};
  }
`;

const FilterSelect = styled.select`
  padding: 8px 16px;
  border-radius: 20px;
  border: 1px solid #ddd;
  background: #fff;
  font-size: 15px;
`;

// ToggleButton Ïª¥Ìè¨ÎÑåÌä∏ Îã§Ïãú Ï∂îÍ∞Ä
const ToggleButton = styled.button<{ active: boolean }>`
  padding: 8px 16px;
  border-radius: 20px;
  border: 1.5px solid ${({ active }) => (active ? "#00bfae" : "#ddd")};
  background: ${({ active }) => (active ? "#e6fcfa" : "#fff")};
  color: ${({ active }) => (active ? "#00bfae" : "#333")};
  font-weight: 500;
  cursor: pointer;
`;

// Í≤ÄÏÉâÏ∞Ω Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏ Ï∂îÍ∞Ä
const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  margin-left: auto; // Ïò§Î•∏Ï™Ω Ï†ïÎ†¨
`;

const SearchInput = styled.input`
  padding: 8px 16px;
  border-radius: 20px;
  border: 1px solid #ddd;
  background: #f5f5f5;
  font-size: 15px;
  width: 250px;
  &:focus {
    outline: none;
    border-color: ${brandColors.primary};
    background: #fff;
  }
`;

const SearchIcon = styled.div`
  margin-left: -32px;
  color: #999;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
`;

interface ProjectCardItemProps {
  id: number;
  publicId: string;
  title: string;
  description?: string;
  techStacks?: { id: number; name: string }[];
  positions?: { id: number; name: string }[];
  recruitType: string;
  deadline?: string;
  period?: string;
  progressMethod?: string;
  nickname: string;
}

const ProjectCardItem: React.FC<ProjectCardItemProps> = ({
  id,
  publicId,
  title,
  description,
  techStacks = [],
  positions = [],
  recruitType,
  deadline,
  period,
  progressMethod,
  nickname,
}) => {
  const navigate = useNavigate();
  const formattedDeadline = deadline
    ? `ÎßàÍ∞êÏùº | ${deadline.split("-").join(".")}`
    : "";

  const handleClick = () => {
    navigate(`/project/${id}`);
  };

  const handleProfileClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigate(`/profile/${publicId}`);
  };

  return (
    <ProjectCardWrapper onClick={handleClick}>
      <CardHeader>
        <TagCategory>
          {recruitType === "PROJECT" ? "üë®‚Äçüíª ÌîÑÎ°úÏ†ùÌä∏" : "üéì Ïä§ÌÑ∞Îîî"}
        </TagCategory>
        <HandIcon>üå±</HandIcon>
      </CardHeader>
      <CardContent>
        <CardDate>{formattedDeadline}</CardDate>
        <CardTitle>{title}</CardTitle>
        <CardFilter>
          {positions.slice(0, 3).map((position, index) => (
            <FilterButton key={index}>{position.name}</FilterButton>
          ))}
        </CardFilter>
        <CardDivider />
        <CardFooter>
          <AuthorInfo
            style={{ cursor: "pointer" }}
            onClick={handleProfileClick}
          >
            <AuthorAvatar>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="#8ED11E">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"></path>
              </svg>
            </AuthorAvatar>
            <AuthorName>{nickname}</AuthorName>
          </AuthorInfo>
        </CardFooter>
      </CardContent>
    </ProjectCardWrapper>
  );
};

// ÌîÑÎ°úÏ†ùÌä∏ API ÏùëÎãµ ÌÉÄÏûÖ Ï†ïÏùò
interface TechStack {
  id: number;
  name: string;
}

interface Position {
  id: number;
  name: string;
}

interface Post {
  id: number;
  publicId: string;
  nickname: string;
  userId: number;
  title: string;
  content: string;
  recruitType: string;
  recruitMember: number;
  progressMethod: string;
  period: string;
  deadline: string;
  linkType: string;
  link: string;
  cultureFit: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  techStacks: TechStack[];
  positions: Position[];
}

interface PageInfo {
  pageNumber: number;
  pageSize: number;
  sort: {
    empty: boolean;
    sorted: boolean;
    unsorted: boolean;
  };
  offset: number;
  paged: boolean;
  unpaged: boolean;
}

interface PostResponse {
  content: Post[];
  pageable: PageInfo;
  totalPages: number;
  totalElements: number;
  last: boolean;
  first: boolean;
  size: number;
  number: number;
  sort: {
    empty: boolean;
    sorted: boolean;
    unsorted: boolean;
  };
  numberOfElements: number;
  empty: boolean;
}

// ÌïÑÌÑ∞ ÏòµÏÖò ÏÉÅÏàò
const techStackOptions = [
  "JavaScript",
  "TypeScript",
  "React",
  "Vue",
  "Nodejs",
  "Spring",
  "Java",
  "Nextjs",
  "Nestjs",
  "Express",
  "Go",
  "C",
  "Python",
  "Django",
  "Swift",
  "Kotlin",
  "MySQL",
  "MongoDB",
  "PHP",
  "GraphQL",
  "Firebase",
  "ReactNative",
  "Unity",
  "Flutter",
  "AWS",
  "Kubernetes",
  "Docker",
  "Git",
  "Figma",
  "Zeplin",
  "Jest",
  "Svelte",
];

// Í∏∞Ïà† Ïä§ÌÉù ID Îß§Ìïë Í∞ùÏ≤¥
const techStackIdMap: { [key: string]: number } = {
  JavaScript: 1,
  TypeScript: 2,
  React: 3,
  Vue: 4,
  Nodejs: 5,
  Spring: 6,
  Java: 7,
  Nextjs: 8,
  Nestjs: 9,
  Express: 10,
  Go: 11,
  C: 12,
  Python: 13,
  Django: 14,
  Swift: 15,
  Kotlin: 16,
  MySQL: 17,
  MongoDB: 18,
  PHP: 19,
  GraphQL: 20,
  Firebase: 21,
  ReactNative: 22,
  Unity: 23,
  Flutter: 24,
  AWS: 25,
  Kubernetes: 26,
  Docker: 27,
  Git: 28,
  Figma: 29,
  Zeplin: 30,
  Jest: 31,
  Svelte: 32,
};

const positionOptions = [
  "ÌîÑÎ°†Ìä∏ÏóîÎìú",
  "Î∞±ÏóîÎìú",
  "ÎîîÏûêÏù¥ÎÑà",
  "IOS",
  "ÏïàÎìúÎ°úÏù¥Îìú",
  "Îç∞Î∏åÏòµÏä§",
  "PM",
  "Í∏∞ÌöçÏûê",
  "ÎßàÏºÄÌÑ∞",
];

// Ìè¨ÏßÄÏÖò ID Îß§Ìïë Í∞ùÏ≤¥
const positionIdMap: { [key: string]: number } = {
  ÌîÑÎ°†Ìä∏ÏóîÎìú: 1,
  Î∞±ÏóîÎìú: 2,
  ÎîîÏûêÏù¥ÎÑà: 3,
  IOS: 4,
  ÏïàÎìúÎ°úÏù¥Îìú: 5,
  Îç∞Î∏åÏòµÏä§: 6,
  PM: 7,
  Í∏∞ÌöçÏûê: 8,
  ÎßàÏºÄÌÑ∞: 9,
};

const progressMethodOptions = ["Ïò®ÎùºÏù∏", "Ïò§ÌîÑÎùºÏù∏", "Ïò®ÎùºÏù∏/Ïò§ÌîÑÎùºÏù∏"];

// ÏßÑÌñâ Î∞©Ïãù enum Îß§Ìïë
const progressMethodMap: { [key: string]: string } = {
  Ïò®ÎùºÏù∏: "ONLINE",
  Ïò§ÌîÑÎùºÏù∏: "OFFLINE",
  "Ïò®ÎùºÏù∏/Ïò§ÌîÑÎùºÏù∏": "ALL",
};

const cultureFitOptions = [
  { value: "PRACTICAL", label: "Ïã§Ïö©Ï£ºÏùòÌòï" },
  { value: "DEMOCRATIC", label: "ÎØºÏ£ºÏ£ºÏùòÌòï" },
  { value: "AUTONOMOUS", label: "ÏûêÏú®Ï£ºÏùòÌòï" },
  { value: "COLLABORATIVE", label: "ÌòëÏóÖÏ£ºÏùòÌòï" },
  { value: "STRUCTURED", label: "Ï≤¥Í≥ÑÏ£ºÏùòÌòï" },
  { value: "FLEXIBLE", label: "Ïú†Ïó∞Ï£ºÏùòÌòï" },
  { value: "COMMUNICATIVE", label: "ÏÜåÌÜµÏ§ëÏãúÌòï" },
];

const ProjectSection: React.FC = () => {
  const [activeCategory, setActiveCategory] = useState<string>("Ï†ÑÏ≤¥");
  const [currentPage, setCurrentPage] = useState<number>(0); // APIÏóêÏÑúÎäî 0Î∂ÄÌÑ∞ ÏãúÏûë
  const [posts, setPosts] = useState<Post[]>([]);
  const [totalPages, setTotalPages] = useState<number>(0);
  const [totalElements, setTotalElements] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const projectsPerPage = 8;
  const [selectedTechs, setSelectedTechs] = useState<string[]>([]);
  const [selectedPosition, setSelectedPosition] = useState("");
  const [selectedProgress, setSelectedProgress] = useState("");
  const [selectedCulture, setSelectedCulture] = useState("");
  const [showRecruitingOnly, setShowRecruitingOnly] = useState(false);
  const [searchQuery, setSearchQuery] = useState<string>("");

  // Í∏∞Ïà† Ïä§ÌÉù IDÎ•º Ï∞æÎäî Ìï®Ïàò
  const getTechStackId = (techName: string): number | undefined => {
    const techStack = Object.entries(techStackIdMap).find(
      ([name]) => name === techName
    );
    return techStack ? techStack[1] : undefined;
  };

  // Ìè¨ÏßÄÏÖò IDÎ•º Ï∞æÎäî Ìï®Ïàò
  const getPositionId = (positionName: string): number | undefined => {
    const position = Object.entries(positionIdMap).find(
      ([name]) => name === positionName
    );
    return position ? position[1] : undefined;
  };

  // APIÎ°úÎ∂ÄÌÑ∞ ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchPosts = async () => {
    try {
      setIsLoading(true);

      // Í∏∞Î≥∏ URL Î∞è ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞
      let url = `posts?page=${currentPage}&size=${projectsPerPage}`;

      // ÌïÑÌÑ∞ ÏöîÏ≤≠ Í∞ùÏ≤¥ ÏÉùÏÑ±
      const filterParams: any = {};

      // Í≤ÄÏÉâÏñ¥ Ï∂îÍ∞Ä
      if (searchQuery.trim()) {
        filterParams.keyword = searchQuery.trim();
      }

      // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ (Ï†ÑÏ≤¥/ÌîÑÎ°úÏ†ùÌä∏/Ïä§ÌÑ∞Îîî)
      if (activeCategory !== "Ï†ÑÏ≤¥") {
        filterParams.recruitType =
          activeCategory === "ÌîÑÎ°úÏ†ùÌä∏" ? "PROJECT" : "STUDY";
      }

      // ÏßÑÌñâ Î∞©Ïãù ÌïÑÌÑ∞ÎßÅ
      if (selectedProgress) {
        filterParams.progressMethod = progressMethodMap[selectedProgress] || "";
      }

      // Ïª¨Ï≤òÌïè ÌïÑÌÑ∞ÎßÅ
      if (selectedCulture) {
        filterParams.cultureFit = selectedCulture;
      }

      // Ìè¨ÏßÄÏÖò ÌïÑÌÑ∞ÎßÅ
      if (selectedPosition) {
        const positionId = getPositionId(selectedPosition);
        if (positionId) {
          filterParams.positionId = positionId;
        }
      }

      // Í∏∞Ïà† Ïä§ÌÉù ÌïÑÌÑ∞ÎßÅ
      if (selectedTechs.length > 0) {
        const techStackIds = selectedTechs
          .map(getTechStackId)
          .filter((id): id is number => id !== undefined);

        if (techStackIds.length > 0) {
          filterParams.techStackIds = techStackIds;
        }
      }

      // Î™®Ïßë Ï§ëÎßå Î≥¥Í∏∞ ÌïÑÌÑ∞
      if (showRecruitingOnly) {
        filterParams.status = "RECRUITING";
      }

      // ÌïÑÌÑ∞ ÌååÎùºÎØ∏ÌÑ∞ URLÏóê Ï∂îÍ∞Ä
      Object.entries(filterParams).forEach(([key, value], index) => {
        if (Array.isArray(value)) {
          // Î∞∞Ïó¥ Í∞íÏùÄ Í∞ÅÍ∞Å Î≥ÑÎèÑÏùò ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï∂îÍ∞Ä
          value.forEach((item: any) => {
            url += `&${key}=${encodeURIComponent(item)}`;
          });
        } else {
          url += `&${key}=${encodeURIComponent(value as string)}`;
        }
      });

      console.log("ÏöîÏ≤≠ URL:", url);

      const response = await fetchAPI(url, {
        method: "GET",
      });

      if (!response.ok) {
        throw new Error("ÏÑúÎ≤ÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }

      const data: PostResponse = await response.json();
      setPosts(data.content);
      setTotalPages(data.totalPages);
      setTotalElements(data.totalElements);
    } catch (error) {
      console.error("ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      // Ïò§Î•ò Î∞úÏÉù Ïãú Îπà Î∞∞Ïó¥Î°ú Ï¥àÍ∏∞Ìôî
      setPosts([]);
      setTotalPages(0);
      setTotalElements(0);
    } finally {
      setIsLoading(false);
    }
  };

  // ÎìúÎ°≠Îã§Ïö¥ onChange Ìï∏Îì§Îü¨
  const handleTechSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (value && !selectedTechs.includes(value)) {
      // Í∏∞Ïà† Ïä§ÌÉù ÏÑ†ÌÉù Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
      setCurrentPage(0);
      setSelectedTechs([...selectedTechs, value]);
    }
    // ÎìúÎ°≠Îã§Ïö¥ÏùÑ Îã§Ïãú "Í∏∞Ïà† Ïä§ÌÉù"ÏúºÎ°ú Ï¥àÍ∏∞Ìôî
    e.target.selectedIndex = 0;
  };

  // ÌÉúÍ∑∏ Ï†úÍ±∞ Ìï∏Îì§Îü¨
  const handleRemoveTech = (tech: string) => {
    // Í∏∞Ïà† Ïä§ÌÉù ÌÉúÍ∑∏ Ï†úÍ±∞ Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setSelectedTechs(selectedTechs.filter((t) => t !== tech));
  };

  // Ìè¨ÏßÄÏÖò Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    // Ìè¨ÏßÄÏÖò Î≥ÄÍ≤Ω Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setSelectedPosition(e.target.value);
  };

  // ÏßÑÌñâ Î∞©Ïãù Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleProgressChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    // ÏßÑÌñâ Î∞©Ïãù Î≥ÄÍ≤Ω Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setSelectedProgress(e.target.value);
  };

  // Ïª¨Ï≤òÌïè Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleCultureChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    // Ïª¨Ï≤òÌïè Î≥ÄÍ≤Ω Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setSelectedCulture(e.target.value);
  };

  // Î™®Ïßë Ï§ëÎßå Î≥¥Í∏∞ ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
  const handleRecruitingToggle = () => {
    // Î™®Ïßë Ï§ëÎßå Î≥¥Í∏∞ ÌÜ†Í∏Ä Ïãú ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setShowRecruitingOnly((prev) => !prev);
  };

  // Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• Ìï∏Îì§Îü¨
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  // ÏóîÌÑ∞ ÌÇ§ ÎàÑÎ•º Îïå Í≤ÄÏÉâ Ïã§Ìñâ
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleSearch();
    }
  };

  // Í≤ÄÏÉâ Ïã§Ìñâ Ìï®Ïàò
  const handleSearch = () => {
    // Í≤ÄÏÉâ Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    setCurrentPage(0);
    fetchPosts();
  };

  // ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    fetchPosts();
  }, [
    currentPage,
    activeCategory,
    selectedProgress,
    selectedCulture,
    selectedPosition,
    showRecruitingOnly,
  ]);

  // Í∏∞Ïà† Ïä§ÌÉù ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (ÎîîÎ∞îÏö¥Ïä§ Ï≤òÎ¶¨)
  useEffect(() => {
    const timer = setTimeout(() => {
      fetchPosts();
    }, 300);

    return () => clearTimeout(timer);
  }, [selectedTechs]);

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ Ìï®Ïàò
  const handleCategoryChange = (category: string) => {
    // Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ ÌéòÏù¥ÏßÄÎ•º 0ÏúºÎ°ú Ï¥àÍ∏∞Ìôî
    setCurrentPage(0);
    setActiveCategory(category);
  };

  // ÌéòÏù¥ÏßÄ Î≤àÌò∏ ÏÉùÏÑ±
  const renderPageNumbers = () => {
    const pageNumbers = [];
    const maxPageDisplay = 5;

    // APIÏóêÏÑú ÌéòÏù¥ÏßÄÎäî 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÏßÄÎßå, UIÏóêÏÑúÎäî 1Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎØÄÎ°ú Ï°∞Ï†ï
    const displayCurrentPage = currentPage + 1;

    if (totalPages <= maxPageDisplay) {
      // ÌéòÏù¥ÏßÄÍ∞Ä 5Í∞ú Ïù¥ÌïòÎ©¥ Î™®Îì† ÌéòÏù¥ÏßÄ Î≤àÌò∏ ÌëúÏãú
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(
          <PageNumber
            key={i}
            active={i === displayCurrentPage}
            onClick={() => handlePageChange(i)}
          >
            {i}
          </PageNumber>
        );
      }
    } else {
      // ÌéòÏù¥ÏßÄÍ∞Ä 5Í∞ú Ï¥àÍ≥ºÏùº Îïå Ï≤òÎ¶¨
      // Ìï≠ÏÉÅ ÌòÑÏû¨ ÌéòÏù¥ÏßÄ, Ï≤´ ÌéòÏù¥ÏßÄ, ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄÎäî ÌëúÏãú
      // Í∑∏ Ïô∏ÏóêÎäî ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ï£ºÎ≥ÄÏùò ÌéòÏù¥ÏßÄÎßå ÌëúÏãú

      // Ï≤´ ÌéòÏù¥ÏßÄ ÌëúÏãú
      pageNumbers.push(
        <PageNumber
          key={1}
          active={1 === displayCurrentPage}
          onClick={() => handlePageChange(1)}
        >
          1
        </PageNumber>
      );

      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÍ∞Ä 4Î≥¥Îã§ ÌÅ¨Î©¥ "..." ÌëúÏãú
      if (displayCurrentPage > 3) {
        pageNumbers.push(
          <PageNumber
            key="ellipsis1"
            onClick={() => handlePageChange(Math.floor(displayCurrentPage / 2))}
          >
            ...
          </PageNumber>
        );
      }

      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ï£ºÎ≥ÄÏùò ÌéòÏù¥ÏßÄ ÌëúÏãú
      const startPage = Math.max(2, displayCurrentPage - 1);
      const endPage = Math.min(totalPages - 1, displayCurrentPage + 1);

      for (let i = startPage; i <= endPage; i++) {
        if (i !== 1 && i !== totalPages) {
          // Ï≤´ ÌéòÏù¥ÏßÄÏôÄ ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄÎäî Ïù¥ÎØ∏ ÌëúÏãúÎê®
          pageNumbers.push(
            <PageNumber
              key={i}
              active={i === displayCurrentPage}
              onClick={() => handlePageChange(i)}
            >
              {i}
            </PageNumber>
          );
        }
      }

      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÍ∞Ä totalPages-3Î≥¥Îã§ ÏûëÏúºÎ©¥ "..." ÌëúÏãú
      if (displayCurrentPage < totalPages - 2) {
        pageNumbers.push(
          <PageNumber
            key="ellipsis2"
            onClick={() =>
              handlePageChange(
                Math.floor((displayCurrentPage + totalPages) / 2)
              )
            }
          >
            ...
          </PageNumber>
        );
      }

      // ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄ ÌëúÏãú
      pageNumbers.push(
        <PageNumber
          key={totalPages}
          active={totalPages === displayCurrentPage}
          onClick={() => handlePageChange(totalPages)}
        >
          {totalPages}
        </PageNumber>
      );
    }

    return pageNumbers;
  };

  // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber - 1); // APIÎäî 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎØÄÎ°ú 1ÏùÑ ÎπºÏ§å
    // ÌéòÏù¥ÏßÄ ÏÉÅÎã®ÏúºÎ°ú Ïä§ÌÅ¨Î°§
    window.scrollTo({
      top: document.getElementById("project-section")?.offsetTop || 0,
      behavior: "smooth",
    });
  };

  return (
    <SectionContainer id="project-section">
      <SectionContent>
        <SectionHeader>
          <Title>EumÍ≥º Ìï®ÍªòÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏</Title>
          <Description>
            Îã§ÏñëÌïú Í∞úÎ∞úÏûêÎì§Ïù¥ Ìï®ÍªòÌïòÎäî Ìù•ÎØ∏Î°úÏö¥ ÌîÑÎ°úÏ†ùÌä∏Îì§ÏùÑ ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî.
          </Description>
        </SectionHeader>

        {/* ÏÉÅÎã® Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº - styled-componentsÎ°ú ÍµêÏ≤¥ */}
        <CategoryButtonContainer>
          <CategoryButton
            active={activeCategory === "Ï†ÑÏ≤¥"}
            onClick={() => handleCategoryChange("Ï†ÑÏ≤¥")}
          >
            Ï†ÑÏ≤¥
          </CategoryButton>
          <CategoryButton
            active={activeCategory === "ÌîÑÎ°úÏ†ùÌä∏"}
            onClick={() => handleCategoryChange("ÌîÑÎ°úÏ†ùÌä∏")}
          >
            ÌîÑÎ°úÏ†ùÌä∏
          </CategoryButton>
          <CategoryButton
            active={activeCategory === "Ïä§ÌÑ∞Îîî"}
            onClick={() => handleCategoryChange("Ïä§ÌÑ∞Îîî")}
          >
            Ïä§ÌÑ∞Îîî
          </CategoryButton>
        </CategoryButtonContainer>

        {/* ÌïÑÌÑ∞ Î∞î */}
        <FilterBar>
          <FilterSelect onChange={handleTechSelect}>
            <option value="">Í∏∞Ïà† Ïä§ÌÉù</option>
            {techStackOptions
              .filter((opt) => !selectedTechs.includes(opt))
              .map((opt) => (
                <option key={opt} value={opt}>
                  {opt}
                </option>
              ))}
          </FilterSelect>
          <FilterSelect
            value={selectedPosition}
            onChange={handlePositionChange}
          >
            <option value="">Ìè¨ÏßÄÏÖò</option>
            {positionOptions.map((opt) => (
              <option key={opt} value={opt}>
                {opt}
              </option>
            ))}
          </FilterSelect>
          <FilterSelect
            value={selectedProgress}
            onChange={handleProgressChange}
          >
            <option value="">ÏßÑÌñâ Î∞©Ïãù</option>
            {progressMethodOptions.map((opt) => (
              <option key={opt} value={opt}>
                {opt}
              </option>
            ))}
          </FilterSelect>
          <FilterSelect value={selectedCulture} onChange={handleCultureChange}>
            <option value="">Ïª¨Ï≤òÌïè</option>
            {cultureFitOptions.map((opt) => (
              <option key={opt.value} value={opt.value}>
                {opt.label}
              </option>
            ))}
          </FilterSelect>
          <ToggleButton
            active={showRecruitingOnly}
            onClick={handleRecruitingToggle}
          >
            üëÄ Î™®Ïßë Ï§ëÎßå Î≥¥Í∏∞
          </ToggleButton>

          {/* Í≤ÄÏÉâÏ∞Ω Ï∂îÍ∞Ä */}
          <SearchContainer>
            <SearchInput
              placeholder="Ï†úÎ™©, Í∏Ä ÎÇ¥Ïö©ÏùÑ Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî."
              value={searchQuery}
              onChange={handleSearchChange}
              onKeyPress={handleKeyPress}
            />
            <SearchIcon onClick={handleSearch}>üîç</SearchIcon>
          </SearchContainer>
        </FilterBar>

        {/* ÏÑ†ÌÉùÎêú Í∏∞Ïà† Ïä§ÌÉù ÌÉúÍ∑∏ ÌëúÏãú */}
        <div
          style={{
            display: "flex",
            gap: "8px",
            flexWrap: "wrap",
            marginBottom: "16px",
          }}
        >
          {selectedTechs.map((tech) => (
            <span
              key={tech}
              style={{
                display: "inline-flex",
                alignItems: "center",
                background: "#e6fcfa",
                color: "#00bfae",
                borderRadius: "16px",
                padding: "4px 12px",
                fontSize: "14px",
                fontWeight: 500,
              }}
            >
              {tech}
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  handleRemoveTech(tech);
                }}
                style={{
                  marginLeft: "6px",
                  background: "none",
                  border: "none",
                  color: "#00bfae",
                  fontWeight: "bold",
                  cursor: "pointer",
                  fontSize: "16px",
                }}
                aria-label={`${tech} Ï†úÍ±∞`}
              >
                √ó
              </button>
            </span>
          ))}
        </div>

        {isLoading ? (
          <div style={{ textAlign: "center", padding: "40px 0" }}>
            Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
          </div>
        ) : posts.length === 0 ? (
          <div style={{ textAlign: "center", padding: "40px 0" }}>
            Ìï¥ÎãπÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§.
          </div>
        ) : (
          <>
            <div
              style={{ marginBottom: "12px", fontSize: "14px", color: "#666" }}
            >
              Ï¥ù {totalElements}Í∞úÏùò ÌîÑÎ°úÏ†ùÌä∏
            </div>
            <CardsGrid>
              {posts.map((post) => (
                <ProjectCardItem
                  key={post.id}
                  id={post.id}
                  publicId={post.publicId}
                  title={post.title}
                  description={post.content}
                  techStacks={post.techStacks}
                  positions={post.positions}
                  recruitType={post.recruitType}
                  deadline={post.deadline}
                  period={post.period}
                  progressMethod={post.progressMethod}
                  nickname={post.nickname}
                />
              ))}
            </CardsGrid>
          </>
        )}

        {totalPages > 0 && <Pagination>{renderPageNumbers()}</Pagination>}
      </SectionContent>
    </SectionContainer>
  );
};

export default ProjectSection;
